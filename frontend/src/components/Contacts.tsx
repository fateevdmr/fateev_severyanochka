import React, { useState, useEffect, useCallback } from "react";
import style from "../styles/Contacts.module.css";
import { useForm } from "react-hook-form";
import { useLocalStorage } from "../utils/storageUtils";
import MapComponent from "./MapComponent";

const SUCCESS_MESSAGE_DURATION = 3000;
const PHONE_PATTERN = /^\+?[0-9]{10,12}$/;
const EMAIL_PATTERN = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;

interface FormData {
  fullName: string;
  phone: string;
  email: string;
  message: string;
}

interface Store {
  name: string;
  address: string;
  phone: string;
}

const STORES: Store[] = [
  {
    name: "–í–û–°–•–û–î",
    address: "—É–ª. –î–æ—Ä–æ–∂–Ω–∞—è 10",
    phone: "+7 904 271 35 90",
  },
  {
    name: "–ü–ê–†–£–°",
    address: "—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è 87",
    phone: "+7 82140 91330",
  },
  {
    name: "–†–Ø–ë–ò–ù–£–®–ö–ê",
    address: "—É–ª. –ó–∞–≤–æ–¥—Å–∫–∞—è 16",
    phone: "+7 82140 91101",
  },
  {
    name: "–ü–ï–õ–´–°–¨",
    address: "—É–ª. –†–∞–±–æ—á–∞—è 1",
    phone: "+7 82140 91300",
  },
];

const LOCATIONS = ["–ø.–©–µ–ª—å—è—é—Ä", "–¥.–í–µ—Ä—Ç–µ–ø", "—Å.–ö—Ä–∞—Å–Ω–æ–±–æ—Ä", "–¥.–î–∏—é—Ä"];

const initialFormData: FormData = {
  fullName: "",
  phone: "",
  email: "",
  message: "",
};

const Contacts: React.FC = () => {
  const [formData, setFormData] = useLocalStorage<FormData>(
    "contactFormData",
    initialFormData
  );
  const [submitted, setSubmitted] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<string | null>(null);
  const [selectedStore, setSelectedStore] = useState<Store | null>(null);

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors },
  } = useForm<FormData>({
    defaultValues: formData,
  });

  useEffect(() => {
    Object.entries(formData).forEach(([key, value]) => {
      setValue(key as keyof FormData, value);
    });
  }, [setValue, formData]);

  const onSubmit = useCallback(
    (data: FormData) => {
      console.log(data);
      setFormData(data);
      setSubmitted(true);
      reset();
      setTimeout(() => setSubmitted(false), SUCCESS_MESSAGE_DURATION);
    },
    [reset, setFormData]
  );

  const handleLocationClick = useCallback((location: string) => {
    setSelectedLocation(location);
    setSelectedStore(null);
  }, []);

  const handleStoreClick = useCallback((store: Store) => {
    setSelectedStore(store);
  }, []);

  const renderStore = useCallback(
    (store: Store) => (
      <div
        key={store.name}
        className={`${style.store} ${
          selectedStore?.name === store.name ? style.active : ""
        }`}
        onClick={() => handleStoreClick(store)}
      >
        <h3 className={style.storeTitle}>{store.name}</h3>
        <p>{store.address}</p>
        <a href={`tel:${store.phone}`}>{store.phone}</a>
      </div>
    ),
    [selectedStore, handleStoreClick]
  );

  return (
    <div className={style.contactsWrapper}>
      <h1 className={style.title}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h1>
      <div className={style.contactInfo}>
        <div className={style.contactBlock}>
          <span>üìÑ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è, —Å–∫–ª–∞–¥</span>
          <a href="tel:+78214092619">+7 82140 92619</a>
        </div>
        <div className={style.contactBlock}>
          <span>‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–æ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</span>
          <a href="tel:+79087163397">+7 908 716 33 97</a>
        </div>
      </div>
      <div className={style.message}>
        –ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π ¬´–°–ï–í–ï–†–Ø–ù–û–ß–ö–ê¬ª —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
        –∫–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —É—Å–ª–æ–≤–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ñ–æ—Ä–º—É, –µ—Å–ª–∏
        –≤–∞–º —Å—Ç–∞–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã —Ñ–∞–∫—Ç—ã –∫–æ—Ä—Ä—É–ø—Ü–∏–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –Ω–∞—Ä—É—à–µ–Ω–∏—è
        –∑–∞–∫—É–ø–æ—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä, –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–Ω—Ç–∏–º–æ–Ω–æ–ø–æ–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞,
        –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –ø–æ–ª–Ω–æ–º–æ—á–∏—è–º–∏, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏, –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–æ—Ä–º
        –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –Ω–æ—Ä–º —Å–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞—Ä—É—à–µ–Ω–∏—è
        –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫ –ö–æ–º–ø–∞–Ω–∏–∏
      </div>
      <form onSubmit={handleSubmit(onSubmit)} className={style.contactForm}>
        <div className={style.formGroup}>
          <input
            {...register("fullName", { required: "–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" })}
            placeholder="–í–∞—à–µ –∏–º—è"
            className={errors.fullName ? style.error : ""}
            aria-invalid={errors.fullName ? "true" : "false"}
            aria-describedby={errors.fullName ? "fullName-error" : undefined}
          />
          {errors.fullName && (
            <span id="fullName-error" className={style.errorMessage}>
              {errors.fullName.message}
            </span>
          )}
        </div>

        <div className={style.formGroup}>
          <input
            {...register("phone", {
              required: "–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
              pattern: {
                value: PHONE_PATTERN,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
              },
            })}
            placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            className={errors.phone ? style.error : ""}
            aria-invalid={errors.phone ? "true" : "false"}
            aria-describedby={errors.phone ? "phone-error" : undefined}
          />
          {errors.phone && (
            <span id="phone-error" className={style.errorMessage}>
              {errors.phone.message}
            </span>
          )}
        </div>

        <div className={style.formGroup}>
          <input
            {...register("email", {
              pattern: {
                value: EMAIL_PATTERN,
                message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email",
              },
            })}
            placeholder="Email"
            className={errors.email ? style.error : ""}
            aria-invalid={errors.email ? "true" : "false"}
            aria-describedby={errors.email ? "email-error" : undefined}
          />
          {errors.email && (
            <span id="email-error" className={style.errorMessage}>
              {errors.email.message}
            </span>
          )}
        </div>

        <div className={style.formGroup}>
          <textarea
            {...register("message")}
            placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            className={style.messageInput}
            aria-label="–°–æ–æ–±—â–µ–Ω–∏–µ"
          />
        </div>

        <button type="submit" className={style.submitButton}>
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </button>

        {submitted && (
          <div className={style.successMessage} role="alert">
            –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          </div>
        )}
      </form>
    </div>
  );
};

export default Contacts;
